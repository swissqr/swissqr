package ch.swissqr.paymentslip;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import ch.swissqr.barcode.QRSwissBarcode;
import ch.swissqr.content.ContentBarcodeCH;
import ch.swissqr.content.ch.Address;
import ch.swissqr.errors.BarcodeException;
import ch.swissqr.pdf.DocumentBase;
import ch.swissqr.utils.StringUtils;

/**
 * Payment Slip DPF document
 * 
 * @author pschatzmann
 *
 */
public class PaymentSlipPDF extends DocumentBase {
	public enum Format {
		A4, A5, A6, Others
	}

	private static final Logger LOG = Logger.getLogger(PaymentSlipPDF.class);
	private static final float TOP = 90;
	private static final float LINEHEIGHT = 3.53f;
	private static final float SECTIONMARGIN = 5.0f;
	public static final float POINT_TO_MM = 0.352778f;
	private int leftX = 65;
	private int rightX = 128;
	private DateFormat dateFormat;
	private PDPageContentStream contentStream;
	private PDFont fontBold;
	private PDFont font;
	private float currentTop = TOP;
	private boolean printLines = true;
	private PDPage blankPage;
	private boolean autoClose = true;

	public PaymentSlipPDF() {		
	}
	
	/**
	 * Default constructor
	 * @param content
	 * @param requestedLangauge
	 * @param format
	 * @param printLines
	 * @throws BarcodeException
	 */
	public PaymentSlipPDF(ContentBarcodeCH content, String requestedLangauge, Format format, boolean printLines)
			throws BarcodeException {
		print(content, requestedLangauge, format, printLines);
	}

	/**
	 * Prints the payment slip
	 * @param content
	 * @param requestedLangauge
	 * @param format
	 * @param printLines
	 * @return 
	 * @throws BarcodeException
	 */
	public PDPageContentStream print(ContentBarcodeCH content, String requestedLangauge, Format format, boolean printLines)
			throws BarcodeException {
		String language = getLangauge(content, requestedLangauge);
		Locale.setDefault(new Locale(language, content.getDebitor().getCountryISO()));
		dateFormat = DateFormat.getDateInstance(DateFormat.DEFAULT);

		setupPageFormat(format, printLines);
		setDocument(createPaymentSlip(content, language));
		return this.contentStream;
	}

	/**
	 * Constructor for creating an unformatted payment slip with just prints the relevant content
	 * w/o left margin and cut off line printing
	 * @param content
	 * @param requestedLangauge
	 * @throws BarcodeException
	 */
	public PaymentSlipPDF(ContentBarcodeCH content, String requestedLangauge) throws BarcodeException {
		this(content,requestedLangauge, Format.A4,true);
	}

	
	public PaymentSlipPDF(PDDocument document) throws BarcodeException {
		dateFormat = DateFormat.getDateInstance(DateFormat.DEFAULT);
		setDocument(document);
	}

	private String getLangauge(ContentBarcodeCH content, String lang) {
		String language = lang;
		if (lang==null) {
			language = content.getProperties().getProperty("language");
		}
		if (language == null) {
			language = "en";
		}
		language =  language.trim().toLowerCase();
		if (!language.matches("de|en|fr|it")) {
			LOG.info("Setting default language to english because of unsupported code: " + lang);
			language = "en";
		}
		return language;
	}

	private void setupPageFormat(Format format, boolean printLines) {
		switch (format) {
		case A4:
			this.printLines = printLines;
			blankPage = new PDPage(PDRectangle.A4);
			blankPage.setCropBox(new PDRectangle(210f, 297f));
			leftX = 65;
			rightX = 128;
			break;
		case A5:
			this.printLines = true;
			blankPage = new PDPage(PDRectangle.A5);
			blankPage.setCropBox(new PDRectangle(210f, 148f));
			leftX = 65;
			rightX = 128;
			break;
		default:
			// support for others and A6
			this.printLines = false;
			leftX = 5;
			rightX = 68;
			blankPage = new PDPage();
			blankPage.setCropBox(new PDRectangle(150.0f, 107.0f));

			break;
		}
	}

	/**
	 * Creates a payment slip PDF document
	 * 
	 * @param content
	 * @return
	 * @throws Exception
	 */
	private PDDocument createPaymentSlip(ContentBarcodeCH content, String lang) throws BarcodeException {
		try {
			Properties messages = getProperties(lang);

			PDDocument document = new PDDocument();
			document.addPage(blankPage);

			fontBold = PDType1Font.HELVETICA_BOLD;
			font = PDType1Font.HELVETICA;

			contentStream = new PDPageContentStream(document, blankPage);

			printLeft(content, messages, document);
			float yBox = printRight(content, messages);

			drawBarcode(content, document);
			addressImage(document, yBox);

			printLines();
			if (autoClose) {
				contentStream.close();
			}
			return document;
		} catch (Exception ex) {
			throw new BarcodeException(ex);
		}
	}

	private void printLines() throws IOException {
		if (this.printLines) {
			contentStream.setLineDashPattern(new float[] { 1, 3 }, 0);
			contentStream.setLineWidth(0.1f);

			contentStream.setStrokingColor(Color.GRAY);
			contentStream.moveTo(0f, 105f);
			contentStream.lineTo(210f, 105f);
			contentStream.stroke();

			contentStream.moveTo(57f, 0);
			contentStream.lineTo(57f, 105f);
			contentStream.stroke();
		}
	}

	private void printLeft(ContentBarcodeCH content, Properties messages, PDDocument document) throws IOException {
		currentTop = TOP;
		title(messages.getProperty("T_TITLE"), leftX, Math.round(currentTop), 12);
		contentStream.beginText();
		contentStream.newLineAtOffset(leftX, 82);
		print(messages.getProperty("T_SUPPORTS"), supports(content, messages), LINEHEIGHT);
		contentStream.endText();
		print(messages.getProperty("T_CURRENCY"), content.getPaymentAmount().getCurrency(), leftX, 20);
		printAmount(content, messages, document);
	}

	private float printRight(ContentBarcodeCH content, Properties messages) throws IOException {
		currentTop = TOP;
		contentStream.beginText();

		contentStream.newLineAtOffset(rightX, currentTop);
		print(messages.getProperty("T_ACCOUNT"), content.getCreditorInformation().getIban(), LINEHEIGHT);
		print(messages.getProperty("T_CREDITOR"),
				content.getCreditorInformation().getCreditorAddress().getAddressLines(), LINEHEIGHT);
		print(messages.getProperty("T_ULTIMATECREDITOR"), content.getUltimateCreditorInformation().getAddressLines(),
				LINEHEIGHT);
		print(messages.getProperty("T_REF"), content.getPaymentReference().getReference(), LINEHEIGHT);
		print(messages.getProperty("T_INFO"), content.getPaymentReference().getUnstructuredMessage(), LINEHEIGHT);

		float yBox = printDebitor(content, messages);

		Date date = content.getPaymentAmount().getDueDate();
		if (date != null) {
			print(messages.getProperty("T_DUE"), dateFormat.format(date), LINEHEIGHT);
		}

		contentStream.endText();
		return yBox;
	}

	private float printDebitor(ContentBarcodeCH content, Properties messages) throws IOException {
		float yBox = -1;
		Address debitor = content.getDebitor();
		if (debitor != null && debitor.isDefined()) {
			print(messages.getProperty("T_DEB"), debitor.getAddressLines(), LINEHEIGHT);
		} else {
			print(messages.getProperty("T_DEB"));
			yBox = currentTop;
			contentStream.newLineAtOffset(0, -25);
			currentTop = currentTop - 30;
		}
		return yBox;
	}

	private void printAmount(ContentBarcodeCH content, Properties messages, PDDocument document) throws IOException {
		String amount = content.getPaymentAmount().getAmountStr();
		if (!StringUtils.isEmpty(amount)) {
			print(messages.getProperty("T_AMOUNT"), content.getPaymentAmount().getAmountStr(),
					leftX + 28, 20);
		} else {
			// print title and amount box
			title(messages.getProperty("T_AMOUNT"), leftX + 28, 20, 8);
			contentStream.drawImage(getImageFromResource(document, "/feld/Feld_Betrag_40x15mm.png", "Amount"),
					leftX + 15, 4, 40, 15);
		}
	}

	private Properties getProperties(String lang) throws IOException {
		String resourceName = "language_" + lang;
		Properties messages = StringUtils.loadProperties(resourceName);
		return messages;
	}

	private void drawBarcode(ContentBarcodeCH content, PDDocument document) throws Exception, IOException {
		byte barcodeByteArray[] = new QRSwissBarcode(content.isTest()).create(content.getContent(), "png");
		PDImageXObject pdImage = PDImageXObject.createFromByteArray(document, barcodeByteArray, "swiss-qr");
		contentStream.drawImage(pdImage, leftX , 28, 46, 46);
	}

	private void addressImage(PDDocument document, float yBox) throws IOException {
		if (yBox > 0) {
			yBox = yBox - 25 + 3;
			contentStream.drawImage(
					getImageFromResource(document, "/feld/Feld_Zahlungspflichtiger_65x25mm.png", "Debitor"), rightX,
					yBox, 65, 25);
		}
	}

	private PDImageXObject getImageFromResource(PDDocument document, String path, String name) throws IOException {
		BufferedImage img = ImageIO.read(this.getClass().getResourceAsStream(path));
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ImageIO.write(img, "png", baos);
		baos.flush();
		byte[] amountByteArray = baos.toByteArray();
		baos.close();
		PDImageXObject amountImage = PDImageXObject.createFromByteArray(document, amountByteArray, name);
		return amountImage;
	}

	private void print(String title, String content, float y) throws IOException {
		if (!StringUtils.isEmpty(content)) {
			String sa[] = { content };
			print(title, sa, y);
		}
	}

	private void print(String title) throws IOException {
		String empty[] = {};
		printX(title, empty, 0);
	}

	private void print(String title, String[] contentArray, float y) throws IOException {
		if (contentArray.length > 0 && !StringUtils.isEmpty(contentArray[0])) {
			// Setting the position for the line
			printX(title, contentArray, y);
		}
	}

	private void printX(String title, String[] contentArray, float y) throws IOException {
		contentStream.setFont(fontBold, 8.0f * POINT_TO_MM);
		contentStream.showText(title);
		contentStream.setFont(font, 10f * POINT_TO_MM);
		for (String content : contentArray) {
			contentStream.newLineAtOffset(0, -y);
			contentStream.showText(content);
			currentTop = currentTop - y;
		}
		currentTop = currentTop - SECTIONMARGIN;
		contentStream.newLineAtOffset(0, -SECTIONMARGIN);
	}

	private void title(String title, int x, int y, int fontSize) throws IOException {
		contentStream.beginText();
		// Setting the position for the line
		contentStream.newLineAtOffset(x, y);
		contentStream.setFont(fontBold, fontSize * POINT_TO_MM);
		contentStream.showText(title);
		contentStream.endText();
	}

	private void print(String title, String content, int x, int y) throws IOException {
		if (!StringUtils.isEmpty(content)) {
			contentStream.beginText();
			// Setting the position for the line
			contentStream.newLineAtOffset(x, y);
			contentStream.setFont(fontBold, 8.0f * POINT_TO_MM);
			contentStream.showText(title);
			contentStream.newLineAtOffset(0, -LINEHEIGHT);
			contentStream.setFont(font, 10.0f * POINT_TO_MM);
			contentStream.showText(content);
			contentStream.endText();
		}
	}

	/**
	 * Calculates the supports expression and returns it as string array
	 * 
	 * @param content
	 * @param messages
	 * @return
	 */
	private String[] supports(ContentBarcodeCH content, Properties messages) {
		List<String> result = new ArrayList();
		result.add(messages.getProperty("T_CT") + delim(content.getAlternativeSchema().size() > 0));
		if (content.getAlternativeSchema().size() > 0) {
			String code = content.getAlternativeSchema().get(0).getCode();
			result.add(StringUtils.getProperty(messages,code,code)+ delim(content.getAlternativeSchema().size() > 1));
		}
		if (content.getAlternativeSchema().size() > 1) {
			String code = content.getAlternativeSchema().get(1).getCode();
			result.add(StringUtils.getProperty(messages, code, code));
		}

		return result.toArray(new String[result.size()]);
	}

	/**
	 * Returns a ',' delimiter if the expression is true
	 * 
	 * @param b
	 * @return
	 */
	private String delim(boolean b) {
		return b ? "," : "";
	}
	
	public PDPageContentStream getPDPageContentStream() {
		return this.contentStream;
	}

	public boolean isAutoClose() {
		return autoClose;
	}

	public void setAutoClose(boolean autoClose) {
		this.autoClose = autoClose;
	}

}
