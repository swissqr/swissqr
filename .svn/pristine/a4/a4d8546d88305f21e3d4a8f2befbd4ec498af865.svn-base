package ch.swissqr.content.ch;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.TreeMap;

import ch.swissqr.content.ContentBarcodeCH;
import ch.swissqr.content.ch.PaymentReference.ReferenceType;
import ch.swissqr.utils.StringUtils;

/**
 * Populates the BarcodeContentCH from a Map and converts a ContentBarcodeCH to a map
 * 
 * @author pschatzmann
 *
 */

public class MapData {
	private Map<String, Object> values;
	DateFormat df = new SimpleDateFormat("dd.MM.yyyy");

	/**
	 * Converts a map to a ContentBarcodeCH object
	 * 
	 * @param values
	 * @param content
	 * @throws ParseException
	 */
	public void mapToContent(Map<String, Object> values, ContentBarcodeCH content) throws ParseException {
		this.values = values;

		setAddess("Creditor", content.getCreditorInformation().getCreditorAddress());
		setAddess("UltimateCreditor", content.getUltimateCreditorInformation());
		setAddess("Debitor", content.getDebitor());

		Date dueDate = StringUtils.parseDate(get("DueDate"));
		ReferenceType rt = getReferenceType();

		content.getCreditorInformation().iban(get("IBAN"));
		content.paymentAmount(
				new PaymentAmount().amount(getNumber("Amount")).currency(get("Currency")).dueDate(dueDate));
		content.paymentReference(new PaymentReference().unstructuredMessage(get("Message")).reference(get("Reference"))
				.referenceType(rt));

		String alternativeSchemeParameters = get("AlternativeSchemeParameters");
		if (!StringUtils.isEmpty(alternativeSchemeParameters)) {
			content.alternativeSchema(new AlternativeSchema().alternativeSchema(alternativeSchemeParameters));
		}
		
		updateProperties(values, content);
		
	}

	private void updateProperties(Map<String, Object> values, ContentBarcodeCH content) {
		// generell
		String fileName = (String) values.get("filename");
		if (fileName!=null) {
			content.getProperties().put("filename", fileName);
		}
		String pictureFormat = (String) values.get("pictureFormat");
		if (pictureFormat!=null) {
			content.getProperties().put("pictureFormat", pictureFormat);
		}
		// f√ºr payment slip
		String language = (String) values.get("language");
		if (language!=null) {
			content.getProperties().put("language", language);
		}
		String paperFormat = (String) values.get("pageFormat");
		if (paperFormat!=null) {
			content.getProperties().put("pageFormat", paperFormat);
		}
		String printLines = (String) values.get("printLines");
		if (printLines!=null) {
			content.getProperties().put("printLines", printLines);
		}
		
	}

	private ReferenceType getReferenceType() {
		ReferenceType rt = ReferenceType.NON;
		String referenceType = StringUtils.str((get("ReferenceType"))).trim();
		if (!StringUtils.isEmpty(referenceType)) {
			rt = ReferenceType.valueOf(referenceType);
		}
		return rt;
	}

	private void setAddess(String addressType, Address address) {
		String formattedAddress = get(addressType);
		if (!StringUtils.isEmpty(formattedAddress)) {
			address.setAddressPrinted(formattedAddress);
		} else {
			address.name(get(addressType + "Name")).street(get(addressType + "Street"))
					.houseNumber(get(addressType + "HouseNumber")).postalCode(get(addressType + "PostalCode"))
					.city(get(addressType + "City")).country(get(addressType + "Country"));
		}
	}

	private String get(String key) {
		return StringUtils.str(values.get(key));
	}

	private BigDecimal getNumber(String key) {
		Object obj = values.get(key);
		if (obj != null) {
			if (obj instanceof Double) {
				return BigDecimal.valueOf((Double) obj);
			} else if (obj instanceof BigDecimal) {
				return (BigDecimal) obj;
			} else {
				String str = obj.toString().trim();
				if (!str.isEmpty()) {
					return new BigDecimal(str);
				}
			}
		}
		return null;
	}

	/**
	 * Converts a ContentBarcodeCH to a map
	 * 
	 * @param content
	 * @return
	 */
	public Map<String, Object> contentToMap(ContentBarcodeCH content) {
		return contentToMap(content, false);
	}

	public Map<String, Object> contentToMap(ContentBarcodeCH content, boolean withEmtpyEntries) {
		Map<String, Object> result = new TreeMap();
		putAddress(content.getDebitor(), "Debitor", withEmtpyEntries, result);
		putResult(result, "IBAN", content.getCreditorInformation().getIban(), withEmtpyEntries);
		putAddress(content.getUltimateCreditorInformation(), "UltimateCreditor", withEmtpyEntries, result);
		putAddress(content.getCreditorInformation().getCreditorAddress(), "Creditor", withEmtpyEntries, result);
		putResult(result, "Amount", content.getPaymentAmount().getAmountStr(), withEmtpyEntries);
		putResult(result, "Currency", content.getPaymentAmount().getCurrency(), withEmtpyEntries);
		putResult(result, "Message", content.getPaymentReference().getUnstructuredMessage(), withEmtpyEntries);
		putResult(result, "Reference", content.getPaymentReference().getReference(), withEmtpyEntries);

		ReferenceType refType = content.getPaymentReference().getReferenceType();
		if (refType != null)
			putResult(result, "ReferenceType", content.getPaymentReference().getReferenceType().name(),
					withEmtpyEntries);

		Date date = content.getPaymentAmount().getDueDate();
		if (date != null)
			putResult(result, "DueDate", df.format(date), withEmtpyEntries);

		if (content.getAlternativeSchema().size() >= 1)
			putResult(result, "AlternativeSchemeParameters", content.getAlternativeSchema().get(0).getSchemaValue(),
					withEmtpyEntries);
		if (content.getAlternativeSchema().size() >= 2)
			putResult(result, "AlternativeSchemeParameters1", content.getAlternativeSchema().get(1).getSchemaValue(),
					withEmtpyEntries);

		result.put("contentType",ContentBarcodeCH.class.getSimpleName());
		
		return result;
	}

	private void putAddress(Address adr, String prefix, boolean withEmtpyEntries, Map<String, Object> result) {
		putResult(result, prefix + "Name", adr.getName(), withEmtpyEntries);
		putResult(result, prefix + "Street", adr.getStreet(), withEmtpyEntries);
		putResult(result, prefix + "HouseNumber", adr.getHouseNumber(), withEmtpyEntries);
		putResult(result, prefix + "PostalCode", adr.getPostalCode(), withEmtpyEntries);
		putResult(result, prefix + "City", adr.getCity(), withEmtpyEntries);
		putResult(result, prefix + "Country", adr.getCountryISO(), withEmtpyEntries);
	}

	private void putResult(Map<String, Object> result, String key, String value, boolean withEmtpyEntries) {
		if (withEmtpyEntries || !StringUtils.isEmpty(value)) {
			result.put(key, value);
		}
	}

}
